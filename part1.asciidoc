= Introduction to Git and GitHub--Part 1
:imagesdir: ./images
:toc: macro

An introduction to using Git and GitHub for revision control.

toc::[]

== Class Goals

After participating in part 1 of this intro, you should be able to:

* Create a new repository in GitHub
* Edit a text file using the GitHub browser interface
* View a file's history and find out who changed what lines
* Clone a repository to your local desktop
* Edit files in your desktop and commit locally
* Fix typos in commit messages
* Push changes from your desktop to GitHub
* Understand the problems with editing both in desktop and GitHub
* Fix problems caused by editing in both places
* Participate in a Shared GitHub Repository (not forked)

=== What's Not Covered

In the time available, we won't be able to cover these topics. A follow-on class will address these.

* Ignoring files
* Forking a GitHub repository
* Submitting pull requests
* Responding to pull requests
* Branching and merging
* Rebasing and rewriting history
* Using the stash
* The GitHub issue tracking system
* The Wiki associated with a GitHub repository
* Git workflows

== What is Git? What is GitHub?

Git is a _revision control system_ that was created in 2005
to support the Linux
project, replacing an earlier non-free, commercial system. It is designed
to be fast, simple, free, and to support parallel development by many
distributed developers. In addition, it supports both small and very
large projects equally well.

GitHub is a cloud-based hosting service since 2007
for Git repositories. It supports
all the features of Git and adds new, web-based features such as issue
tracking and Wikis.

=== Revision Control

A _revision control system_ keeps track of your files over time, retaining
all versions of each file and allowing you to see the history of
changes. You can see what was changed when, and see the details about
exactly what was changed.

The Git revision control system essentially keeps track of snapshots of your files over time. And any point you can recover an older version or see what changes you made.

image:snapshots.png[Git snapshots over time, 558, 213, role="thumb"]

In addition, a revision control system acts as an online back of your
files. Cloud-based revision control systems such as GitHub back up
your files on remote servers, aiding in disaster recovery.

=== Key Git Features

* High performance
* Local copy of entire history
* Ability to work off-line
* Support for large projects and many collaborators

=== Other Online Providers Supporting Git

You can use Git with other online hosting providers. Some popular providers are:

* GitHub--Free for public repositories
* BitBucket--Provided by Atlassian, free for repositories with 5 or fewer developers.
* SourceForge--Popular free repository, supports other revision control systems, too.

=== Other Resources

link:https://git-scm.com/book/en/v2[Pro Git online book]

link:https://git-scm.com/documentation[Official Git Documentation]

link:https://training.github.com/[Official Git Training]

link:https://www.atlassian.com/git/tutorials/[Atlassian Git Tutorials]

link:http://rancoud.com/sourcetree-git-use/[A SourceTree/Git tutorial]

link:http://swcarpentry.github.io/git-novice/[Software Carpentry Git Tutorial]

== Viewing a GitHub Repository

Most GitHub repositories are publicly available, to promote sharing, and can be viewed in a web browser. You can also search for repositories using the search box at the top of the GitHub page. As an example, let's search for "`RobotsForKids.`"

.GitHub search results
image:robots-for-kids-search.png[Sample search results, 567, 240, role="thumb"]

Each result shows both the user name (`RobotGarden`, for example) and the repository name (`RobotsForKids`). You can click on either part, to see all the repositories for that user, or to see only the repository.

If we go to a repository, we see a list of files and directories in that repository, plus the contents of a "`README'" file, if it exists.

.Main page for a repository
image:repository-main-page.png[Main page of a repository, 527, 421, role="thumb"]

Many things are clickable on this page:

File names:: go to that file to view contents and history, or to edit the file on GitHub
image:watch-button.png[Watch button, 98, 36]:: get notified of changes
image:star-button.png[Star button, 72, 36]:: add to your _starred repositories_ (favorites), accessed by _Your stars_ menu item in upper-right dropdown
_Issues_:: link to issue tracking system
_Wiki_:: link to Wiki pages for this repository
_Settings_:: change repository name, add collaborators, delete repository, and more
_commits_:: see all changes
_branch_:: see _branches_, separate lines of work
_releases_:: access released versions
_contributors_:: see all who have made commits

In addition, there are other buttons for getting information or manipulating the repository:

image:branch-button.png[The branch button, 136, 40]:: Move to a different _branch_ (not covered today)

image:new-file-button.png[New file button, 78, 36]:: Create a new text file using the GitHub GUI

image:copy-URL-button.png[Button for copying the repository URL, 40, 32]:: copy the URL of the repository to use locally

image:download-zip-button.png[Button for downloading a ZIP file, 114, 32]:: download a ZIP file of the current repository contents (as opposed to downloading a _release_)

=== README Files

On GitHub, any directory may have a README file. If it does, the contents of that file are shown when navigating into the directory on GitHub. The README file may have any of these names:

`README.md`:: A formatted README file using Markdown syntax. (Most common on GitHub.)
`README.asciidoc`:: A formatted README file using Asciidoc syntax. May instead use the `.adoc` extension. (My favorite. Used to write the Git user manual.)
`README.txt`:: A plain text README file.
`README`:: A plain text README file.

*Recommendation:* Create either `README.md` or `README.asciidoc` in the root directory of every repository. Learn enough of either Markdown (`.md`) or Asciidoc (`.asciidoc`) syntax to write useful documentation.

=== License Files

Repositories usually also contain a license file, usually called `LICENSE`, although this is not required. There is a good reason for this: in the USA, if you create any written document, it is automatically copyrighted (unless you specify otherwise) and all rights are reserved to you. Therefore, unless you provide a license, no one can reuse your work, unless they break the law. (If you publish in GitHub or other repository where there are "`Terms of Service`" agreements, you probably are granting certain rights automatically, however.)

*Recommendation:* Add a license file to the top of every repository. Use the license that most appropriately describes how others may reuse your work.

Choosing a license is beyond the scope of this class, but here are a few ideas:

* For code repositories, the most popular licenses are:
** Commercial-friendly: Apache, BSD, MIT, and LGPL
** Commercial-restricted: GPL
* For text and artwork repositories, the most popular is the Creative Commons license.
* If you want to put your work in the public domain, use something like
the link:http://unlicense.org/[Unilicense].

There are other options, too. Perl uses the Artistic License, the Eclipse organization uses the Eclipse Public License, and the Mozilla organization uses the Mozilla Public License. The only license I'd recommend against is the Eclipse Public License, because lawyers at two firms I've worked for would not allow us to use any library using that license. Also see sites like http://choosealicense.com/ for more information.

=== Exercise 1

In a browser, log on to your GitHub account and in the search box at the top type "`arduino'" and press _Search_. There should be tens of thousands of results, but the first should be called `arduino/Arduino`. Click on it to go to that repository.

. Does the repository display README information below the list of files? If so, what format is it written in, Markdown (`.md`) or Asciidoc (`.asciidoc`)?

. Go to the README file and show its history. When was the last change in 2014?

. Show the "`blame`" history for the README file. Who last modified line 20, and when?

. What is the latest release of the Arduino repository, and when was it released?

. What license does the Arduino project use?

. Go to the file `arduino-core/src/cc/arduino/Compiler.java`. What line was changed on October 26, 2015?

link:ex1-solution.asciidoc[Exercise 1 solution]

== Creating a GitHub Repository

=== Making Changes in GitHub

When viewing a text file, you can click the edit button image:git-edit-button.png[Git edit button, 31, 31] to begin editing the file within the browser. When you are finished editing you can either press `cancel` to abandon your changes or scroll to the bottom of the page where you can fill out the "`Commit Changes`" form to commit your change to the repository.

image:commit-form.png[The commit form, 500, 166, role="thumb"]

Normally you should type a short description in the first line (recommended no more 50 characters) and a longer description, if needed, in the large text box. Then press the "`Commit Changes'" button to finish the commit. You can also commit to a new branch, but that is beyond the scope of this introduction.

=== Markdown and Asciidoc in One Minute

When editing text files, such as the README, you will normally use one of the two main _lightweight markup_ syntaxes, Markdown or Asciidoc. You can choose either. Both Markdown and Asciidoc allow you to type plain text which will be
converted automatically into HTML to render in the browser. They also
support special conventions for adding section headers and text formatting.

There are a lot of features in both which we won't cover here, but here is a very brief cheat-sheet.

[options="headers", cols="1a,1a,1a"]
|===
| Markdown | Asciidoc | Result

|
----
# header
## header
### header
...
----

|
----
= header
== header
=== header
...
----

| document title, section header, subsection, etc.

|
----
Blank lines delimit paragraphs.

Like this.
----

|
----
Blank lines delimit paragraphs.

Like this.
----

| Blank lines delimit paragraphs.

Like this.

|
----
some **bold** text, *italic* text, and `code`.
----

|
----
some *bold* text, _italic_ text, and `code`.
----

| some *bold* text, _italic_ text, and `code`.

|
----
Indent lines to make them code blocks

  sum = a + b
  diff = a - b
----

|
----
Indent lines to make them code blocks

  sum = a + b
  diff = a - b
----

| Indent lines to make them code blocks

  sum = a + b
  diff = a - b

|
----
A bulleted list:
* one
* two

A numbered list:
1. first
1. second
----

|
----
A bulleted list:
* one
* two

A numbered list:
. first
. second
----

| A bulleted list:

* one
* two

A numbered list:

. first
. second

|===

[NOTE]
====
Asciidoc requires a blank line after headers, while Markdown does not.
====

=== Adding Files

You can also press the _New File_ button image:new-file-button.png[New file button, 78, 36] to add a text file to the repository. You will be able to edit the contents of the new file immediately. Use a file extension of `.md` or `.asciidoc` if you want GitHub to render the file as HTML content automatically.

To complete the file addition, fill out the commit form at the bottom of the page just as you would when editing an existing file.

=== Exercise 2

. Using your GitHub account, create a new repository.

. Add a README file to your repository, using either Markdown or Asciidoc format, and add a descriptive paragraph, a section header, and another sentence or two. Then commit the changes.

. Create a new file called `events.md` (or `events.asciidoc`). Add to the file a list of major US holidays. Then commit the change.

. Edit the README file, adding a line that says to look at the events page for major holidays, and commit the change. (For extra credit: figure out how to create a hyperlink to the events page from the README page.)

. What is the commit ID for the commit in which you added the README file?

link:ex2-solution.asciidoc[Exercise 2 Solution]

== Installing Git and SourceTree

The GitHub GUI is handy for creating and editing documentation files in Markdown or Asciidoc format, but has a lot of limitations. In particular, you cannot add binary files such as images. But also, if you are writing code you want to edit the files locally, not on GitHub. For that reason you need a _Git client._ The two clients we will use are _SourceTree_, a GUI client, and the Git command line client.

For this class you should use either SourceTree or the command-line Git client. (You can try both, if you're ambitious.)

=== Installing SourceTree

==== Getting SourceTree

SourceTree is a free product from Atlassian, the company that makes the Jira issue tracking system, the Confluence Wiki, and the Bamboo continuous integration server software. It requires a free registration after 30 days of use. (I have not had any spam from them after registrating, but YMMV.)

Download and install SourceTree from the SourceTree site:

https://www.sourcetreeapp.com/

==== Configuring SourceTree

The first time you run SourceTree it will prompt you to connect with an exsiting repository account.

image:add-an-account.png[Adding an account]

Select _GitHub_ from the dropdown account list and enter your credentials. Then press _Continue_. (You can choose to skip this step for now, if you prefer.)

You will then be asked if you want to "`Clone'" your first repository from your remote account.

image:clone-first-repo.png[]

Select the repository you created earlier. SourceTree will suggest a default directory location for the local copy. Change it if you like. Then press _Continue_. You should then see the SourceTree window for your repository:

image:branch-view.png[View of the master branch, 581, 423]

There are several parts to this window:

Left sidebar:: Allows you to switch between the _branch view_ and the _working copy_, or to switch branches, among other things.

Top button bar:: Allows you to pull or push changes to the remote server, among many other things.

Commit list:: Shows all commits.

Commit details panel:: Details the commit selected in the commit list.

==== Configuring Your Name

Before you make changes using SourceTree, it's important to configure your name and email address to accompany your commits. Go to the _Preferences_ dialog and enter your name and email in the boxes shown:

image:sourcetree-preferences.png[Preferences dialog]

While you are there, you may want to go to the _Update_ tab and turn on
automatic checking for updates to SourceTree.

image:check-for-updates.png[Turning on update checking]

=== Installing the Git Command-Line Client

==== Getting the Git Command-Line Client

The Git command-line client can be downloaded, for Windows and OS X, from the Git web site:

https://git-scm.com/downloads

For Linux, it is better to use the package manager for your Linux system. (And Git may already be installed.) For example, for Ubuntu you could install Git via:

  sudo apt-get install git

==== Setting Your Name and Email

Once installed, the first thing you should do is configure your name and email address. (See https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup)

----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

The Git configuration is stored in a file called `.gitconfig`, usually in your home directory. It is a text file that you can edit, although it is safer to use the `git` command to change settings.

NOTE: You can view all your settings through the command
`git config --global --list`. There is also a `--local` configuration file specific to a single repository. Local configurations override global configurations.

==== Configuring Your Editor

The Git command line will spawn an editor to edit commit messages. On Linux this is `nano`, by default, a newer, popular editor for Linux configuration files. If you don't want `nano`, or if you are using Windows, you will need to configure your editor. For example,

----
C:\Desktop> git config core.editor notepad
----

or

----
$ git config core.editor vim
----

==== Cloning a GitHub Repository

To use your GitHub repository locally, you must clone it. First, go to your repository in GitHub and copy the URL using the button: image:copy-URL-button.png[Button for copying the repository URL, 40, 32].

Then, in a shell or command window, move to the parent directory where you want to clone your repository. Clone it by using the `git clone` command:

----
git clone https://github.com/your-user-name/repository-name
----

== Browsing the Repository Locally

In SourceTree, when looking at the `master` branch, you see a complete list of changes that have been made. You can click on any change to see details of what was changed in each file.

//image:sourcetree-commit-list.png[Sourcetree commit list, 606, 145, role="thumb"]

image:commit-details.png[Showing commit details, 775, 557]

You'll notice that the selected view in the left sidebar is _master_ under _Branches_. This is because we are working on a single branch, which is by default called _master_.

From the command line, you use `git log` to see changes.

----
$ git log
commit 3a668e2600c4f8285590782998555056c5a96afb
Author: Mark Rose <markrose@acm.org>
Date:   Thu Dec 10 14:35:42 2015 -0800

    Added more class materials.
    
    Clarified what is covered, improved references, and added information on viewing a Git Repository.

commit 5d5a238e3cbe51a87de418832d980a049ccd744f
Author: Mark Rose <markrose@acm.org>
Date:   Thu Dec 10 02:18:00 2015 -0800

    Added the initial version of the class materials, and updated the outline in the README.

commit 688626bccdd665f01a52158fcf8c348a35f5e239
Author: Mark Rose <markrose@acm.org>
Date:   Mon Dec 7 11:28:12 2015 -0800

    Converted to Asciidoc format. Added Makefile for creating local HTML previews through asciidoctor.

commit 328c44121fa576e4580806a55d93bcf78588ebef
Author: Mark Rose <markrose@acm.org>
Date:   Mon Dec 7 09:27:01 2015 -0800
...
$
----

And if you want to see the actual changes, you have to use the commit ID, such as `5d5a238e3cbe51a87de418832d980a049ccd744f`. Thankfully, Git allows you to use at least the first four characters, such as `5d5a`. This command will show the changes between the last two commits--in other words, the latest changes.

----
git diff 5d5a 3a66
----

There is also another shorthand: `HEAD` means the latest commit, `HEAD~1` means one before the latest, `HEAD~2` means two before, etc. So this command is equivalent to that above:

----
git diff HEAD~1 HEAD
----

== Making Changes Locally

The files in your repository are stored in three different ways. First, a _working copy_ is stored a normal files. The layout exactly matches what you will see on the GitHub server.

Second, after you make changes to a file you must _stage_ the changes before committing. This copies the file to a staging area. If you change your mind before commiting, you can _unstage_ the file as well, deleting the staged copy.

Finall, you can commit changes from the staging area to the local repository. The local repository is a complete copy of what is on the GitHub server, except for any changes you have not yet _pushed_ to the server, or any changes made on the server that you have not yet _pulled_ to your local copy. Any other users working in the same repository will also have a complete copy of all versions.

image:areas.png[The areas a file may be in, 401, 221, role="thumb"]

NOTE: The staging area and local copy of the repository are stored in a `.git` directory. You should rarely, if ever, manipulate any of those files directly.

=== Editing Files

To make changes to a file, simply edit it. (Or copy a new file on top of it.) There is no "`checkout`" process in Git--all files are always editable.

Once you edit a file or create a new file you will see a number after the _Working Copy_ link in the left sidebar. This shows how many files have been changed or added, but not yet committed. If you go to that view, you see the files in the _Unstaged_ area.

image:unstaged-files.png[Files in the unstaged area, 775, 557]

If you have made changes and don't yet see them in the _Working Copy_ view, use `^R` or Command-R to refresh the view.

You can move files back and forth between the staged and unstaged areas by using the checkboxes, or dragging, or right-clicking and choosing a menu option, or by using ellipsis menu button image:ellipsis-menu.png[Ellipsis menu button, 35, 27]. Once you are satisfied with the changes you can commit them by clicking in the _Commit message_ box and filling out the commit form:

image:commit-panel.png[The commit panel in SourceTree, 604, 105, file="thumb"]

=== Committing from the Command Line

From the command line there are several commands that do the equivalent of the various SourceTree panels.

|===
| Command | Purpose

| `git status` | Shows the status of the working and staging areas

| `git diff` | Shows the changes that have not yet been staged

| `git diff --cached` | Shows the changes that are already staged

| `git add file` | Adds a file to the staging area

| `git reset HEAD file` | Unstages a file without losing changes

| `git checkout` ``--`` `file` | Discard changes in a modified file in the working area

|===

You can also use a shorthand: `git add -A` adds all new files, changed files, and removed files to the staging area.

You'll notice if you do `git status` that it shows the branch we are working on in the first line of output.

----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")
$
----

Once you stage the files to be committed, you perform the actual commit via the command `git commit`. There are two forms.

`git commit -m "your commit message"`:: Commits with the given message
`git commit`:: Spawns your configured editor to edit a commit message, and commits when you exit the editor

=== Pushing Changes to GitHub

You can commit once or many times locally, but eventually you will want to synchronize your changes with the copy on GitHub. In SourceTree, to push your changes, press the _Push_ button image:push-button.png[Push button, 40, 55]. You will be asked which branch to push, but this will default to _master_, the only branch. Once you click `OK`, any local commits not present on the server will be pushed to GitHub. Afterward, you will see that the local _master_ branch is on the same commit as `origin/master` and `origin/HEAD`, which are the SourceTree indications of the remote (GitHub) state.

image:up-to-date.png[All branches are in sync, 480, 45, role="thumb"]

=== Pushing Changes from the Command Line

You can see the list of remote locations corresponding to your local repository (equivalent to the _Remotes_ list in the SourceTree sidebar) via:

----
$ git remote -v
origin	https://github.com/merose/git-class-test.git (fetch)
origin	https://github.com/merose/git-class-test.git (push)
$
----

To push the local changes to the remote:

----
$ git push origin master
----

This pushes to the remote named `origin` any changes on the `master` branch that are not present in the remote repository.

=== Exercise 3

. Install SourceTree or the Git command-line tools, if not already installed. Then clone the repository you created in <<Exercise 2>>.

. Edit the README file, adding this new content:
+
----
## Preamble

We the people of the United States of America, in order to form a
more perfect union...
----

. Move the README file to the staging area and commit the changes. Verify that the log shows a new commit.

. Push the new changes to the remote on GitHub. Verify that the local _master_ branch and the *origin*/_master_ branch are in synch.

. Create a new file called `hello.md` with this content:
+
----
# Hello, There

This is a test of the emergency broadcast system. If this had been
an actual emergency, you would have been informed where to tune...
----

. Add the new file `hello.md` to the staging area.

. Modify `hello.md` again, adding this new section:
+
----
## Another Section

When in the course of human events, it becomes necessary...
----

. Notice that there is now a copy in the staging area, with the original content, and also a copy that is not staged, with the newer content. Add the newer copy to the staging area.

. Commit the changes.

. Edit the README file and modify the text as follows:
+
Old text:
+
----
We the people of the United States of America, in order to form a
more perfect union...
----
+
New text:
+
----
We the rulers of the dictatorship of Pottsylvania, in order to
form a more perfect police state...
----

. Stage the changes to the README and commit.

. Push both commits to the GitHub origin. Verify that both the local _master_ and _origin/master_ are on the same commit.

link:ex3-solution.asciidoc[Exercise 3 Solution]

== More Local Changes

=== Renaming and Removing Files

== Fixing Problems

=== Merging Remote Changes

== Making Releases

A `.gitignore` file--important for code repositories.


== GitHub History View

image:github-history.png[]

== Viewing Git History

image:git-graph.png[]

----
commit ff13b303d45bd2584576814112b5bb5ce3e468d4
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Fri Dec 4 14:14:15 2015 +0100

    Forgot to remove old arduino-builder SHAs

commit 580bcb500361ea9735d5c74a9f3ce7b7b45d715c
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Fri Dec 4 14:03:54 2015 +0100

    Updating arduino-builder to 1.3.6

commit 9a39e5e6aca5fafd61e72dc65ac2bd9a76df8a42
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Fri Dec 4 09:55:17 2015 +0100

    Some configuration may totally miss network interfaces, even localhost. Fixes #4249

commit a2848716a06936c375355e02498c3efccd9153e4
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Thu Dec 3 16:34:25 2015 +0100

    Added -Dportable=true param to ant. You can build your own portable version of
    the IDE

commit 66117a5cc0510c7f63d8ba7c6e740aa29a8b473c
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Thu Dec 3 11:05:25 2015 +0100

    Burn Bootloader was run in the UI thread, avoiding intermediate messages to be printed to IDE console

commit 91245e216432bfac6bb1ff9fde705989d5847bf3
Author: Federico Fissore <f.fissore@arduino.cc>
Date:   Thu Dec 3 09:54:30 2015 +0100

    Updating arduino-builder to 1.3.5
----
